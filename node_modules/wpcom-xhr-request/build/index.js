'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = request;

var _wpError = require('wp-error');

var _wpError2 = _interopRequireDefault(_wpError);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Module variables
 */
var debug = (0, _debug2.default)('wpcom-xhr-request');

/**
 * Defauts
 */

/**
 * Module dependencies.
 */
var defaults = {
	apiVersion: '1',
	apiNamespace: 'wp/v2',
	authToken: null,
	body: null,
	formData: null,
	headers: null,
	method: 'get',
	query: null,
	processResponseInEnvelopeMode: true,
	proxyOrigin: 'https://public-api.wordpress.com',
	url: ''
};

/**
 * Send the request
 *
 * @param  {Superagent} req - request instance
 * @param  {Object} settings - request settings
 * @param  {Function} fn - callback function
 * @return {Superagent} request instance
 */
var sendResponse = function sendResponse(req, settings, fn) {
	var isEnvelopeMode = settings.isEnvelopeMode,
	    isRestAPI = settings.isRestAPI,
	    processResponseInEnvelopeMode = settings.processResponseInEnvelopeMode;


	req.end(function (error, response) {
		if (error && !response) {
			return fn(error);
		}

		var body = response.body,
		    headers = response.headers,
		    statusCode = response.statusCode;
		var ok = response.ok;
		var _response$req = response.req,
		    path = _response$req.path,
		    method = _response$req.method;

		headers.status = statusCode;

		if (ok) {
			if (isEnvelopeMode && processResponseInEnvelopeMode) {
				// override `error`, body` and `headers`
				if (isRestAPI) {
					headers = body.headers;
					statusCode = body.code;
					body = body.body;
				} else {
					headers = body.headers;
					statusCode = body.status;
					body = body.body;
				}

				headers.status = statusCode;

				if (null !== statusCode && 2 !== Math.floor(statusCode / 100)) {
					debug('Error detected!');
					var _wpe = (0, _wpError2.default)({ path: path, method: method }, statusCode, body);
					return fn(_wpe, null, headers);
				}
			}
			return fn(null, body, headers);
		}

		var wpe = (0, _wpError2.default)({ path: path, method: method }, statusCode, body);
		return fn(wpe, null, headers);
	});

	return req;
};

/**
 * Returns `true` if `v` is a File Form Data, `false` otherwise.
 *
 * @param {Mixed} v - instance to analize
 * @return {Boolean} `true` if `v` is a DOM File instance
 * @private
 */
function isFile(v) {
	return v instanceof Object && 'undefined' !== typeof Blob && v.fileContents instanceof Blob;
}

/**
 * Performs an XMLHttpRequest against the WordPress.com REST API.
 *
 * @param {Object|String} options - `request path` or `request parameters`
 * @param {Function} fn - callback function
 * @return { XHR } xhr instance
 * @api public
 */
function request(options, fn) {
	if ('string' === typeof options) {
		options = { path: options };
	}

	var settings = (0, _assign2.default)({}, defaults, options);

	// is REST-API api?
	settings.isRestAPI = options.apiNamespace === undefined;

	// normalize request-method name
	settings.method = settings.method.toLowerCase();

	var apiNamespace = settings.apiNamespace,
	    apiVersion = settings.apiVersion,
	    authToken = settings.authToken,
	    body = settings.body,
	    formData = settings.formData,
	    headers = settings.headers,
	    isRestAPI = settings.isRestAPI,
	    method = settings.method,
	    query = settings.query,
	    proxyOrigin = settings.proxyOrigin;

	// request base path

	var basePath = void 0;

	if (isRestAPI) {
		basePath = '/rest/v' + apiVersion;
	} else if (apiNamespace && /\//.test(apiNamespace)) {
		basePath = '/' + apiNamespace; // wpcom/v2
	} else {
		basePath = '/wp-json'; // /wp-json/sites/%s/wpcom/v2 (deprecated)
	}

	// Envelope mode FALSE as default
	settings.isEnvelopeMode = false;

	settings.url = proxyOrigin + basePath + settings.path;
	debug('API URL: %o', settings.url);

	// create HTTP Request instance
	var req = _superagent2.default[method](settings.url);

	// querystring
	if (query) {
		req.query(query);
		debug('API send URL querystring: %o', query);

		settings.isEnvelopeMode = isRestAPI ? query.http_envelope : query._envelope;
		debug('envelope mode: %o', settings.isEnvelopeMode);
	}

	// body
	if (body && formData) {
		debug('API ignoring body because formData is set. They cannot both be used together.');
	}
	if (body && !formData) {
		req.send(body);
		debug('API send POST body: %o', body);
	}

	// POST FormData (for `multipart/form-data`, usually a file upload)
	if (formData) {
		for (var i = 0; i < formData.length; i++) {
			var data = formData[i];
			var key = data[0];
			var value = data[1];
			debug('adding FormData field %o: %o', key, value);

			if (isFile(value)) {
				req.attach(key, new File([value.fileContents], value.fileName));
			} else {
				req.field(key, value);
			}
		}
	}

	// headers
	if (headers) {
		req.set(headers);
		debug('adding HTTP headers: %o', headers);
	}

	if (authToken) {
		req.set('Authorization', 'Bearer ' + authToken);
	}

	if (!req.get('Accept')) {
		// set a default "Accept" header preferring a JSON response
		req.set('Accept', '*/json,*/*');
	}

	sendResponse(req, settings, fn);

	return req.xhr;
}
module.exports = exports['default'];

//# sourceMappingURL=index.js.map